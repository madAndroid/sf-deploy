
module Deployer

    class Config

        require 'yaml'

        public

        def initialize
            load_config
        end

        def get_config( application )

            unless @configuration.has_key?( application )
                raise "No configuration for application '#{application}'" 
            end

            Deployer::Application.new( application, @configuration[application] )

        end

        private

        @configuration

        def config_file
            File.join( File.dirname(__FILE__), 'config.yml' )
        end

        def load_config
            @configuration = YAML::load_file( config_file )
        end

    end

    class Application

        @configuration
        @name

        def initialize( name, config )
            @configuration = config
            @name          = name
        end

        def git_repo
            @configuration['git_repo'] or raise "No git_repo defined for #{@name}"
        end

        def checkout_path
            @configuration['checkout_path'] || "/srv/deployer/checkouts/#{name}"
        end

        def method_missing(m, *args, &block)
            @configuration[m.to_s]
        end

    end

end

unless ENV.has_key?('DEPLOY_APP')
    raise "Set the DEPLOY_APP environment to choose an app to deploy"
end


dc = Deployer::Config.new()
app = dc.get_config( ENV['DEPLOY_APP'] )

namespace :deployer do

        task :create_checkout_path do
            require 'fileutils'
            FileUtils.mkdir_p( app.checkout_path ) unless File.directory?( app.checkout_path )
        end
            

        desc "Initial git checkout"
        task :initial_git_checkout => [:create_checkout_path] do
            git_repo = app.git_repo
            return if File.exists?( File.join( app.checkout_path, '.git' ) )
            system( "cd #{app.checkout_path} && git clone #{app.git_repo}" )
        end

	desc "Update git checkout"
        task :update_git_checkout => [:initial_git_checkout] do
            configuration = dc.get_config( ENV['DEPLOY_APP'] )

        end

end
